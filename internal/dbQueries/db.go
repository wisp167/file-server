// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package dbQueries

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countFilesStmt, err = db.PrepareContext(ctx, countFiles); err != nil {
		return nil, fmt.Errorf("error preparing query CountFiles: %w", err)
	}
	if q.countFilesByNameStmt, err = db.PrepareContext(ctx, countFilesByName); err != nil {
		return nil, fmt.Errorf("error preparing query CountFilesByName: %w", err)
	}
	if q.createFileStmt, err = db.PrepareContext(ctx, createFile); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFile: %w", err)
	}
	if q.deleteFileStmt, err = db.PrepareContext(ctx, deleteFile); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFile: %w", err)
	}
	if q.getFileByIDStmt, err = db.PrepareContext(ctx, getFileByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByID: %w", err)
	}
	if q.getFileByNameStmt, err = db.PrepareContext(ctx, getFileByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetFileByName: %w", err)
	}
	if q.listFilesStmt, err = db.PrepareContext(ctx, listFiles); err != nil {
		return nil, fmt.Errorf("error preparing query ListFiles: %w", err)
	}
	if q.searchFilesStmt, err = db.PrepareContext(ctx, searchFiles); err != nil {
		return nil, fmt.Errorf("error preparing query SearchFiles: %w", err)
	}
	if q.updateFileStmt, err = db.PrepareContext(ctx, updateFile); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFile: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countFilesStmt != nil {
		if cerr := q.countFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFilesStmt: %w", cerr)
		}
	}
	if q.countFilesByNameStmt != nil {
		if cerr := q.countFilesByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFilesByNameStmt: %w", cerr)
		}
	}
	if q.createFileStmt != nil {
		if cerr := q.createFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFileStmt: %w", cerr)
		}
	}
	if q.deleteFileStmt != nil {
		if cerr := q.deleteFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFileStmt: %w", cerr)
		}
	}
	if q.getFileByIDStmt != nil {
		if cerr := q.getFileByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByIDStmt: %w", cerr)
		}
	}
	if q.getFileByNameStmt != nil {
		if cerr := q.getFileByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFileByNameStmt: %w", cerr)
		}
	}
	if q.listFilesStmt != nil {
		if cerr := q.listFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFilesStmt: %w", cerr)
		}
	}
	if q.searchFilesStmt != nil {
		if cerr := q.searchFilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchFilesStmt: %w", cerr)
		}
	}
	if q.updateFileStmt != nil {
		if cerr := q.updateFileStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFileStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                   DBTX
	tx                   *sql.Tx
	countFilesStmt       *sql.Stmt
	countFilesByNameStmt *sql.Stmt
	createFileStmt       *sql.Stmt
	deleteFileStmt       *sql.Stmt
	getFileByIDStmt      *sql.Stmt
	getFileByNameStmt    *sql.Stmt
	listFilesStmt        *sql.Stmt
	searchFilesStmt      *sql.Stmt
	updateFileStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                   tx,
		tx:                   tx,
		countFilesStmt:       q.countFilesStmt,
		countFilesByNameStmt: q.countFilesByNameStmt,
		createFileStmt:       q.createFileStmt,
		deleteFileStmt:       q.deleteFileStmt,
		getFileByIDStmt:      q.getFileByIDStmt,
		getFileByNameStmt:    q.getFileByNameStmt,
		listFilesStmt:        q.listFilesStmt,
		searchFilesStmt:      q.searchFilesStmt,
		updateFileStmt:       q.updateFileStmt,
	}
}
